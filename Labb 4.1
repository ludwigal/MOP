/*
 * 	startup.c
 *
 */

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");		/* set stack */
__asm__ volatile(" MOV SP,R0\n");
__asm__ volatile(" BL main\n");					/* call main */
__asm__ volatile(".L1: B .L1\n");				/* never return */
}

#define PORT_E 0x40021000
#define SYSTICK 0xE000E010
#define DELAY_COUNT 10000

#define GPIO_E_MODER ((volatile unsigned int *)(PORT_E))
#define GPIO_ODR_LOW ((volatile unsigned char *)(PORT_E + 0x14))

#define SCB_VTOR (volatile unsigned int*) 0xE000ED08	
#define STK_CTRL (volatile unsigned int *) 0xE000E010
#define STK_LOAD (volatile unsigned int *) 0xE000E014
#define STK_VAL (volatile unsigned int *)0xE000E018

void init_app(void){


*GPIO_E_MODER = 0x5555555;

*SCB_VTOR = 0x2001C000;

systick_handler();
}

int delay_count;
int systick_flag;




void systick_irq_handler(void){
	*STK_CTRL = 0;
	delay_count = delay_count - 1;
	if (delay_count > 0){
		delay_1mikro();
	}
	else systick_flag = 1;
	
}

void delay_1mikro(){
	*STK_CTRL = 0;
	*STK_LOAD = ( 168 - 1 );
	*STK_VAL = 0;
	*STK_CTRL = 7;
}

void systick_handler(void){
	*((void(**)(void)) 0x2001C03C) = systick_irq_handler;
	systick_flag = 0; 
	
}

void delay (unsigned int count){
	delay_count = count;
	delay_1mikro();
	systick_flag = 0;
}


void main(void)
{ 
	init_app();
	*GPIO_ODR_LOW = 0;
	delay(DELAY_COUNT);
	*GPIO_ODR_LOW=0xFF;
	
	while(1)
	{
		if(systick_flag)
			break;
	}
	*GPIO_ODR_LOW=0;
}
